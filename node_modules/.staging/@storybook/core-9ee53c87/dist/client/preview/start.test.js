"use strict";

var _global = require("global");

var _start6 = _interopRequireDefault(require("./start"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

jest.mock('@storybook/client-logger');
jest.mock('global', function () {
  return {
    navigator: {
      userAgent: 'browser',
      platform: ''
    },
    window: {
      __STORYBOOK_CLIENT_API__: undefined,
      addEventListener: jest.fn(),
      location: {
        search: ''
      },
      history: {
        replaceState: jest.fn()
      }
    },
    document: {
      addEventListener: jest.fn(),
      getElementById: jest.fn().mockReturnValue({}),
      body: {
        classList: {
          add: jest.fn(),
          remove: jest.fn()
        }
      },
      documentElement: {},
      location: {
        search: '?id=kind--story'
      }
    }
  };
});
afterEach(function () {
  _global.window.__STORYBOOK_CLIENT_API__ = undefined;
});
it('returns apis', function () {
  var render = jest.fn();
  var result = (0, _start6["default"])(render);
  expect(result).toEqual(expect.objectContaining({
    context: expect.any(Object),
    clientApi: expect.any(Object),
    configApi: expect.any(Object),
    forceReRender: expect.any(Function)
  }));
});
it('reuses the current client api when the lib is reloaded', function () {
  jest.useFakeTimers();
  var render = jest.fn();

  var _start = (0, _start6["default"])(render),
      clientApi = _start.clientApi;

  var valueOfClientApi = _global.window.__STORYBOOK_CLIENT_API__;

  var _start2 = (0, _start6["default"])(render),
      newClientApi = _start2.clientApi;

  jest.runAllTimers();
  expect(clientApi).toEqual(newClientApi);
  expect(clientApi).toEqual(valueOfClientApi);
});
it('calls render when you add a story', function () {
  jest.useFakeTimers();
  var render = jest.fn();

  var _start3 = (0, _start6["default"])(render),
      clientApi = _start3.clientApi,
      configApi = _start3.configApi;

  configApi.configure(function () {
    clientApi.storiesOf('kind', {}).add('story', function () {});
  }, {});
  jest.runAllTimers();
  expect(render).toHaveBeenCalledWith(expect.objectContaining({
    selectedKind: 'kind',
    selectedStory: 'story'
  }));
});
it('emits an exception and shows error when your story throws', function () {
  jest.useFakeTimers();
  var render = jest.fn();

  var _start4 = (0, _start6["default"])(render),
      clientApi = _start4.clientApi,
      configApi = _start4.configApi;

  configApi.configure(function () {
    clientApi.storiesOf('kind', {}).add('story1', function () {});
  }, {});
  jest.runAllTimers();
  expect(render).not.toHaveBeenCalled();
  expect(_global.document.body.classList.add).toHaveBeenCalledWith('sb-show-nopreview');
});
it('emits an error and shows error when your framework calls showError', function () {
  jest.useFakeTimers();
  var error = {
    title: 'Some error',
    description: 'description'
  };
  var render = jest.fn().mockImplementation(function (_ref) {
    var showError = _ref.showError;
    showError(error);
  });

  var _start5 = (0, _start6["default"])(render),
      clientApi = _start5.clientApi,
      configApi = _start5.configApi;

  configApi.configure(function () {
    clientApi.storiesOf('kind', {}).add('story', function () {});
  }, {});
  jest.runAllTimers();
  expect(render).toHaveBeenCalled();
  expect(_global.document.body.classList.add).toHaveBeenCalledWith('sb-show-errordisplay');
});