export interface StoryContext {
    name: string;
    kind: string;
    parameters: {
        [key: string]: any;
    };
}
export interface WrapperSettings {
    options: {
        [key: string]: any;
    };
    parameters: {
        [key: string]: any;
    };
}
export declare type StoryGetter = (context: StoryContext) => any;
export declare type StoryWrapper = (getStory: StoryGetter, context: StoryContext, settings: WrapperSettings) => any;
declare type MakeDecoratorResult = (...args: any) => any;
interface MakeDecoratorOptions {
    name: string;
    parameterName: string;
    allowDeprecatedUsage?: boolean;
    skipIfNoParametersOrOptions?: boolean;
    wrapper: StoryWrapper;
}
export declare const makeDecorator: ({ name, parameterName, wrapper, skipIfNoParametersOrOptions, allowDeprecatedUsage, }: MakeDecoratorOptions) => MakeDecoratorResult;
export {};
